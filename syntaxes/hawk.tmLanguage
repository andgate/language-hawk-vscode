<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>hk</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~H</string>
	<key>name</key>
	<string>Hawk</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.hawk</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.hawk</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>In case this regex seems unusual for an infix operator, note that Hawk allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).</string>
			<key>match</key>
			<string>(`)[\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*(`)</string>
			<key>name</key>
			<string>keyword.operator.function.infix.hawk</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(\s*\)</string>
			<key>name</key>
			<string>constant.language.unit.hawk</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\[\s*\]</string>
			<key>name</key>
			<string>constant.language.empty-list.hawk</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(module)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\b(where)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.module.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module_name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module_exports</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[a-z]+</string>
					<key>name</key>
					<string>invalid</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(class)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\b(where)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.class.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_signature</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)
				\b(data|newtype)
				\s+
				([\p{Lu}\p{Lt}][\w\p{Nd}_']*)
				((?:\s+[\p{Ll}][\w\p{Nd}_']*)*)
				\s+
				(where|=|$)
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.hawk</string>
				</dict>
				<key>3</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>'*[\p{Ll}][\w\p{Nd}_']*</string>
							<key>name</key>
							<string>variable.other.generic-type.hawk</string>
						</dict>
					</array>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)
				\b(type)
				\s+
				([^=]*)
				(?:
					\s+
					(=)
					(.*)
				)?\s*$
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type_signature</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type_signature</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(instance)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\b(where)\b|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.instance.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_signature</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(import)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>($|;|(?=--))</string>
			<key>name</key>
			<string>meta.import.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(qualified|as|hiding)</string>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module_name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module_exports</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(deriving)\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.deriving.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#derivings</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>(deriving)\s+([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.hawk</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.deriving.hawk</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)\b
			( deriving
			| where
			| type([\t ]+(family|role))
			| case
			| of
			| let
			| in
			| default
			)\b
			</string>
			<key>name</key>
			<string>keyword.other.hawk</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\binfix[lr]?\b</string>
			<key>name</key>
			<string>keyword.operator.hawk</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(do|if|then|else)\b</string>
			<key>name</key>
			<string>keyword.control.hawk</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Floats are always decimal</string>
			<key>match</key>
			<string>\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b</string>
			<key>name</key>
			<string>constant.numeric.float.hawk</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b</string>
			<key>name</key>
			<string>constant.numeric.hawk</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.preprocessor.c</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>In addition to Hawk's "native" syntax, HKC permits the C preprocessor to be run on a source file.</string>
			<key>match</key>
			<string>^\s*(#)\s*\w+</string>
			<key>name</key>
			<string>meta.preprocessor.c</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.hawk</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&amp;])</string>
					<key>name</key>
					<string>constant.character.escape.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+</string>
					<key>name</key>
					<string>constant.character.escape.octal.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\^[A-Z@\[\]\\\^_]</string>
					<key>name</key>
					<string>constant.character.escape.control.hawk</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\\\s</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.begin.hawk</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\\</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.end.hawk</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\S+</string>
							<key>name</key>
							<string>invalid.illegal.character-not-allowed-here.hawk</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.hawk</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.hawk</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.octal.hawk</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.hexadecimal.hawk</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.control.hawk</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.hawk</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
			(')
			(?:
				[\ -\[\]-~]								# Basic Char
			  | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
					|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
					|US|SP|DEL|[abfnrtv\\\"'\&amp;]))		# Escapes
			  | (\\o[0-7]+)								# Octal Escapes
			  | (\\x[0-9A-Fa-f]+)						# Hexadecimal Escapes
			  | (\^[A-Z@\[\]\\\^_])						# Control Chars
			)
			(')
			</string>
			<key>name</key>
			<string>string.quoted.single.hawk</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)^(\s*)
                (?&lt;fn&gt;
                  (?:
                    [\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']* |
                    \(
                      (?!--+\))
                      (?:
                        (?![(),;\[\]`{}_"'])[\p{S}\p{P}]
                      )+
                    \)
                  )
                  (?:\s*,\s*\g&lt;fn&gt;)?
                )
                \s*(\?)</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>[\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*</string>
							<key>name</key>
							<string>entity.name.function.hawk</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#infix_op</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.double-colon.hawk</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.type-declaration.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_signature</string>
				</dict>
			</array>
			<key>end</key>
			<string>(?=(^(\1)?[^\s]|}))</string>
			<!--<string>(?!^((\1\s+[^\s}])|\s*$))</string>-->
		</dict>
		<dict>
			<key>include</key>
			<string>#data_constructor</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#infix_op</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\?)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.double-colon.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)|$|,|}|\b(in)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hawk</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_signature</string>
				</dict>
			</array>
			<key>name</key>
			<string>meta.type-declaration.hawk</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>In case this regex seems overly general, note that Hawk permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&amp;*.</string>
			<key>match</key>
			<string>[\p{S}\p{P}&amp;&amp;[^(),;\[\]`{}_"']]+</string>
			<key>name</key>
			<string>keyword.operator.hawk</string>
		</dict>
		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>punctuation.separator.comma.hawk</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>block_comment</key>
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>/\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.hawk</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*\\</string>
			<key>name</key>
			<string>comment.block.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.hawk</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=^(?!\s*--\s))</string>
					<key>name</key>
					<string>comment.block.documentation.hawk</string>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.hawk</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.hawk</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=--+(?![\p{S}\p{P}&amp;&amp;[^(),;\[\]`{}_"']]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.hawk</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Operators may begin with '--' as long as they are not entirely composed of '-' characters. This means comments can't be immediately followed by an allowable operator character.</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.hawk</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.double-dash.hawk</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
			</array>
		</dict>
		<key>derivings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*</string>
					<key>name</key>
					<string>entity.other.inherited-class.hawk</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#derivings</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>infix_op</key>
		<dict>
			<key>comment</key>
			<string>An operator cannot be composed entirely of '-' characters; instead, it should be matched as a comment.</string>
			<key>match</key>
			<string>(\((?!--+\))[\p{S}\p{P}&amp;&amp;[^(),;\[\]`{}_"']]+\)|\(,+\))</string>
			<key>name</key>
			<string>entity.name.function.infix.hawk</string>
		</dict>
		<key>module_exports</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.declaration.exports.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b[\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*</string>
					<key>name</key>
					<string>entity.name.function.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*</string>
					<key>name</key>
					<string>storage.type.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.comma.hawk</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#infix_op</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>So named because I don't know what to call this.</string>
					<key>match</key>
					<string>\(.*?\)</string>
					<key>name</key>
					<string>meta.other.unknown.hawk</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>module_name</key>
		<dict>
			<key>match</key>
			<string>(?&lt;conid&gt;[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*(\.\g&lt;conid&gt;)?)</string>
			<key>name</key>
			<string>support.other.module.hawk</string>
		</dict>
		<key>pragma</key>
		<dict>
			<key>begin</key>
			<string>\{-#</string>
			<key>end</key>
			<string>#-\}</string>
			<key>name</key>
			<string>meta.preprocessor.hawk</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(LANGUAGE|OPTIONS_GHC|INCLUDE|WARNING|DEPRECATED|MINIMAL|UNPACK|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|OVERLAPS|INCOHERENT|INLINE|NOINLINE|INLINABLE|CONLIKE|LINE|RULES|SPECIALIZE|SPECIALISE)\b</string>
					<key>name</key>
					<string>keyword.other.preprocessor.hawk</string>
				</dict>
			</array>
		</dict>
		<key>data_constructor</key>
		<dict>
			<key>match</key>
			<string>\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*\b</string>
			<key>name</key>
			<string>constant.other.hawk</string>
		</dict>
		<key>type_signature</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\(\s*\)</string>
					<key>name</key>
					<string>support.constant.unit.hawk</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_signature</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\(\s*([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)\s+([\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)\)\s*(=&gt;)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.hawk</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.generic-type.hawk</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other.big-arrow.hawk</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.class-constraint.hawk</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pragma</string>
				</dict>
				<dict>
					<key>match</key>
					<string>-&gt;</string>
					<key>name</key>
					<string>keyword.other.arrow.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(forall)\b</string>
					<key>name</key>
					<string>keyword.other.forall.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=&gt;</string>
					<key>name</key>
					<string>keyword.other.big-arrow.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*</string>
					<key>name</key>
					<string>variable.other.generic-type.hawk</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*</string>
					<key>name</key>
					<string>storage.type.hawk</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.hawk</string>
	<key>uuid</key>
	<string>5C034675-1F6D-497E-8073-369D37E2FD7D</string>
</dict>
</plist>
